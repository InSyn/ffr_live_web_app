import mongoose from 'mongoose'
import { faker } from '@faker-js/faker'
import { Organization } from '../../models/organization-model.js'
import { Trainer } from '../../models/trainer-model.js'
import { Jury } from '../../models/jury-model.js'
import { Athlete } from '../../models/athlete-model.js'
import { Event } from '../../models/event-model.js'
import { Seminar } from '../../models/seminar-model.js'

const MONGODB_URI =
	process.env.MONGODB_URI ||
	'mongodb://admin:password@localhost:27017/ffr_live_dev?authSource=admin'

// üéØ –†–ï–ê–õ–ò–°–¢–ò–ß–ù–´–ï –î–ê–ù–ù–´–ï FFR (Frontend constraints)
const DISCIPLINES = [
	'–ú–æ–≥—É–ª',
	'–ü–∞—Ä–Ω—ã–π –º–æ–≥—É–ª',
	'–ê–∫—Ä–æ–±–∞—Ç–∏–∫–∞',
	'–ö–æ–º–∞–Ω–¥–Ω–∞—è –∞–∫—Ä–æ–±–∞—Ç–∏–∫–∞',
	'–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –ê–∫—Ä–æ–±–∞—Ç–∏–∫–∞',
	'–°–∫–∏-–∫—Ä–æ—Å—Å',
	'–ö–æ–º–∞–Ω–¥–Ω—ã–π —Å–∫–∏-–∫—Ä–æ—Å—Å',
	'–•–∞—Ñ-–ø–∞–π–ø',
	'–°–ª–æ—É–ø-—Å—Ç–∞–π–ª',
	'–ë–∏–≥-—ç–π—Ä',
	'–†—ç–π–ª'
]

const EVENT_TYPES = [
	'–ö—É–±–æ–∫ –†–æ—Å—Å–∏–∏',
	'–ß–µ–º–ø–∏–æ–Ω–∞—Ç –†–æ—Å—Å–∏–∏',
	'–ü–µ—Ä–≤–µ–Ω—Å—Ç–≤–æ –†–æ—Å—Å–∏–∏',
	'–ö—É–±–æ–∫ –º–∏—Ä–∞',
	'–≠—Ç–∞–ø –ö—É–±–∫–∞ –º–∏—Ä–∞',
	'–¢—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–µ —Å–±–æ—Ä—ã',
	'–ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–µ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è',
	'–†–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è'
]

const EVENT_STATUSES = ['–ó–∞–≤–µ—Ä—à–µ–Ω–æ', '–í –ø—Ä–æ—Ü–µ—Å—Å–µ', '–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ', '–û—Ç–º–µ–Ω–µ–Ω–æ']

const COMPETITION_VENUES = [
	'–†–æ–∑–∞ –•—É—Ç–æ—Ä (–°–æ—á–∏)',
	'–ë–æ–±—Ä–æ–≤—ã–π –õ–æ–≥ (–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫)',
	'–ì–æ—Ä–Ω–æ–ª—ã–∂–Ω—ã–π –∫—É—Ä–æ—Ä—Ç –®–µ—Ä–µ–≥–µ—à',
	'–ú–µ—Ç–∞–ª–ª—É—Ä–≥ (–ú–∞–≥–Ω–∏—Ç–æ–≥–æ—Ä—Å–∫)',
	'–ö–∞–Ω—Ç (–ú–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å)',
	'–ò–≥–æ—Ä–∞ (–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥)',
	'–ê–±–∑–∞–∫–æ–≤–æ (–ë–∞—à–∫–æ—Ä—Ç–æ—Å—Ç–∞–Ω)',
	'–ë–µ–ª–æ–∫—É—Ä–∏—Ö–∞ (–ê–ª—Ç–∞–π—Å–∫–∏–π –∫—Ä–∞–π)',
	'–ú—Ä–∞–º–æ—Ä–Ω–∞—è –≥–æ—Ä–∞ (–ö–µ–º–µ—Ä–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å)',
	'–Æ–∂–Ω–æ-–°–∞—Ö–∞–ª–∏–Ω—Å–∫'
]

const JURY_CATEGORIES = [
	'–°–ø–æ—Ä—Ç–∏–≤–Ω—ã–π —Å—É–¥—å—è —Ç—Ä–µ—Ç—å–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏',
	'–°–ø–æ—Ä—Ç–∏–≤–Ω—ã–π —Å—É–¥—å—è –≤—Ç–æ—Ä–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏',
	'–°–ø–æ—Ä—Ç–∏–≤–Ω—ã–π —Å—É–¥—å—è –ø–µ—Ä–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏',
	'–°–ø–æ—Ä—Ç–∏–≤–Ω—ã–π —Å—É–¥—å—è –≤—Å–µ—Ä–æ—Å—Å–∏–π—Å–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏',
	'–°–ø–æ—Ä—Ç–∏–≤–Ω—ã–π —Å—É–¥—å—è –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'
]

const ATHLETE_CATEGORIES = [
	'–ü–µ—Ä–≤—ã–π —é–Ω–æ—à–µ—Å–∫–∏–π —Ä–∞–∑—Ä—è–¥',
	'–í—Ç–æ—Ä–æ–π —é–Ω–æ—à–µ—Å–∫–∏–π —Ä–∞–∑—Ä—è–¥',
	'–¢—Ä–µ—Ç–∏–π —é–Ω–æ—à–µ—Å–∫–∏–π —Ä–∞–∑—Ä—è–¥',
	'–¢—Ä–µ—Ç–∏–π –≤–∑—Ä–æ—Å–ª—ã–π —Ä–∞–∑—Ä—è–¥',
	'–í—Ç–æ—Ä–æ–π –≤–∑—Ä–æ—Å–ª—ã–π —Ä–∞–∑—Ä—è–¥',
	'–ü–µ—Ä–≤—ã–π –≤–∑—Ä–æ—Å–ª—ã–π —Ä–∞–∑—Ä—è–¥',
	'–ö–∞–Ω–¥–∏–¥–∞—Ç –≤ –º–∞—Å—Ç–µ—Ä–∞ —Å–ø–æ—Ä—Ç–∞',
	'–ú–∞—Å—Ç–µ—Ä —Å–ø–æ—Ä—Ç–∞',
	'–ú–∞—Å—Ç–µ—Ä —Å–ø–æ—Ä—Ç–∞ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞',
	'–ó–∞—Å–ª—É–∂–µ–Ω–Ω—ã–π –º–∞—Å—Ç–µ—Ä —Å–ø–æ—Ä—Ç–∞'
]

const TRAINER_CATEGORIES = [
	'–¢—Ä–µ–Ω–µ—Ä –≤—ã—Å—à–µ–π –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏',
	'–¢—Ä–µ–Ω–µ—Ä –ø–µ—Ä–≤–æ–π –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏',
	'–¢—Ä–µ–Ω–µ—Ä –≤—Ç–æ—Ä–æ–π –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'
]

const RUSSIAN_REGIONS = [
	'–ú–æ—Å–∫–≤–∞',
	'–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥',
	'–ú–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å',
	'–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä—Å–∫–∏–π –∫—Ä–∞–π',
	'–°–≤–µ—Ä–¥–ª–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å',
	'–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å',
	'–¢–∞—Ç–∞—Ä—Å—Ç–∞–Ω',
	'–ß–µ–ª—è–±–∏–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å',
	'–ù–∏–∂–µ–≥–æ—Ä–æ–¥—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å',
	'–°–∞–º–∞—Ä—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å',
	'–û–º—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å',
	'–†–æ—Å—Ç–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å',
	'–£—Ñ–∞',
	'–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫–∏–π –∫—Ä–∞–π',
	'–ü–µ—Ä–º—Å–∫–∏–π –∫—Ä–∞–π',
	'–í–æ—Ä–æ–Ω–µ–∂—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å',
	'–í–æ–ª–≥–æ–≥—Ä–∞–¥—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å',
	'–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä',
	'–°–∞—Ä–∞—Ç–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å',
	'–¢—é–º–µ–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å',
	'–¢–æ–ª—å—è—Ç—Ç–∏',
	'–ò–∂–µ–≤—Å–∫',
	'–ë–∞—Ä–Ω–∞—É–ª',
	'–£–ª—å—è–Ω–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å',
	'–ò—Ä–∫—É—Ç—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å'
]

const RUSSIAN_CITIES = [
	'–ú–æ—Å–∫–≤–∞',
	'–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥',
	'–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫',
	'–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥',
	'–ö–∞–∑–∞–Ω—å',
	'–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥',
	'–ß–µ–ª—è–±–∏–Ω—Å–∫',
	'–°–∞–º–∞—Ä–∞',
	'–û–º—Å–∫',
	'–†–æ—Å—Ç–æ–≤-–Ω–∞-–î–æ–Ω—É',
	'–£—Ñ–∞',
	'–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫',
	'–í–æ—Ä–æ–Ω–µ–∂',
	'–ü–µ—Ä–º—å',
	'–í–æ–ª–≥–æ–≥—Ä–∞–¥',
	'–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä',
	'–°–∞—Ä–∞—Ç–æ–≤',
	'–¢—é–º–µ–Ω—å',
	'–¢–æ–ª—å—è—Ç—Ç–∏',
	'–ò–∂–µ–≤—Å–∫',
	'–ë–∞—Ä–Ω–∞—É–ª',
	'–£–ª—å—è–Ω–æ–≤—Å–∫',
	'–ò—Ä–∫—É—Ç—Å–∫',
	'–•–∞–±–∞—Ä–æ–≤—Å–∫',
	'–Ø—Ä–æ—Å–ª–∞–≤–ª—å',
	'–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫',
	'–ú–∞—Ö–∞—á–∫–∞–ª–∞',
	'–¢–æ–º—Å–∫',
	'–û—Ä–µ–Ω–±—É—Ä–≥',
	'–ö–µ–º–µ—Ä–æ–≤–æ'
]

const FREESTYLE_ORGANIZATIONS = [
	'–§–µ–¥–µ—Ä–∞—Ü–∏—è —Ñ—Ä–∏—Å—Ç–∞–π–ª–∞ –†–æ—Å—Å–∏–∏',
	'–¶–°–ö–ê',
	'–î–∏–Ω–∞–º–æ –ú–æ—Å–∫–≤–∞',
	'–°–ø–∞—Ä—Ç–∞–∫',
	'–õ–æ–∫–æ–º–æ—Ç–∏–≤',
	'–°–ö–ê –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥',
	'–£—Ä–∞–ª-–ì—Ä–µ–π—Ç',
	'–°–∏–±–∏—Ä—è–∫ –ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫',
	'–ú–µ—Ç–∞–ª–ª—É—Ä–≥ –ú–∞–≥–Ω–∏—Ç–æ–≥–æ—Ä—Å–∫',
	'–°–µ–≤–µ—Ä—Å—Ç–∞–ª—å',
	'–ê–≤–∞–Ω–≥–∞—Ä–¥ –û–º—Å–∫',
	'–°–∞–ª–∞–≤–∞—Ç –Æ–ª–∞–µ–≤',
	'–ê–∫ –ë–∞—Ä—Å –ö–∞–∑–∞–Ω—å',
	'–¢—Ä–∞–∫—Ç–æ—Ä –ß–µ–ª—è–±–∏–Ω—Å–∫'
]

const SEASONS = ['2020-2021', '2021-2022', '2022-2023', '2023-2024', '2024-2025', '2025-2026']

const RUSSIAN_FIRST_NAMES_M = [
	'–ê–ª–µ–∫—Å–∞–Ω–¥—Ä',
	'–î–º–∏—Ç—Ä–∏–π',
	'–ú–∞–∫—Å–∏–º',
	'–°–µ—Ä–≥–µ–π',
	'–ê–Ω–¥—Ä–µ–π',
	'–ê–ª–µ–∫—Å–µ–π',
	'–ê—Ä—Ç–µ–º',
	'–ò–ª—å—è',
	'–ö–∏—Ä–∏–ª–ª',
	'–ú–∏—Ö–∞–∏–ª',
	'–ù–∏–∫–∏—Ç–∞',
	'–ú–∞—Ç–≤–µ–π',
	'–†–æ–º–∞–Ω',
	'–ï–≥–æ—Ä',
	'–ê—Ä—Å–µ–Ω–∏–π',
	'–ò–≤–∞–Ω',
	'–î–µ–Ω–∏—Å',
	'–ï–≤–≥–µ–Ω–∏–π',
	'–î–∞–Ω–∏–∏–ª',
	'–¢–∏–º–æ—Ñ–µ–π',
	'–í–ª–∞–¥–∏—Å–ª–∞–≤',
	'–ò–≥–æ—Ä—å',
	'–í–ª–∞–¥–∏–º–∏—Ä',
	'–ü–∞–≤–µ–ª',
	'–†—É—Å–ª–∞–Ω',
	'–ú–∞—Ä–∫',
	'–ì–ª–µ–±',
	'–Ø—Ä–æ—Å–ª–∞–≤',
	'–ì–µ–æ—Ä–≥–∏–π',
	'–î–∞–≤–∏–¥'
]

const RUSSIAN_FIRST_NAMES_F = [
	'–ê–Ω–Ω–∞',
	'–ï–ª–µ–Ω–∞',
	'–ò—Ä–∏–Ω–∞',
	'–û–ª—å–≥–∞',
	'–¢–∞—Ç—å—è–Ω–∞',
	'–ù–∞—Ç–∞–ª—å—è',
	'–Æ–ª–∏—è',
	'–ú–∞—Ä–∏–Ω–∞',
	'–°–≤–µ—Ç–ª–∞–Ω–∞',
	'–ê–Ω–∞—Å—Ç–∞—Å–∏—è',
	'–ï–∫–∞—Ç–µ—Ä–∏–Ω–∞',
	'–î–∞—Ä—å—è',
	'–ê–ª–∏–Ω–∞',
	'–ö—Å–µ–Ω–∏—è',
	'–ü–æ–ª–∏–Ω–∞',
	'–í–∞–ª–µ—Ä–∏—è',
	'–í–∏–∫—Ç–æ—Ä–∏—è',
	'–°–æ—Ñ–∏—è',
	'–í–∞—Ä–≤–∞—Ä–∞',
	'–í–µ—Ä–æ–Ω–∏–∫–∞',
	'–ê–ª–∏—Å–∞',
	'–ö—Ä–∏—Å—Ç–∏–Ω–∞',
	'–ê–Ω–≥–µ–ª–∏–Ω–∞',
	'–ú–∏–ª–∞–Ω–∞',
	'–ê–ª–µ–∫—Å–∞–Ω–¥—Ä–∞',
	'–ï–ª–∏–∑–∞–≤–µ—Ç–∞',
	'–ê—Ä–∏–Ω–∞',
	'–î–∏–∞–Ω–∞',
	'–ê–ª—ë–Ω–∞',
	'–ö–∞—Ä–∏–Ω–∞'
]

const RUSSIAN_LAST_NAMES = [
	'–ò–≤–∞–Ω–æ–≤',
	'–°–º–∏—Ä–Ω–æ–≤',
	'–ö—É–∑–Ω–µ—Ü–æ–≤',
	'–ü–æ–ø–æ–≤',
	'–í–∞—Å–∏–ª—å–µ–≤',
	'–ü–µ—Ç—Ä–æ–≤',
	'–°–æ–∫–æ–ª–æ–≤',
	'–ú–∏—Ö–∞–π–ª–æ–≤',
	'–ù–æ–≤–∏–∫–æ–≤',
	'–§–µ–¥–æ—Ä–æ–≤',
	'–ú–æ—Ä–æ–∑–æ–≤',
	'–í–æ–ª–∫–æ–≤',
	'–ê–ª–µ–∫—Å–µ–µ–≤',
	'–õ–µ–±–µ–¥–µ–≤',
	'–°–µ–º–µ–Ω–æ–≤',
	'–ï–≥–æ—Ä–æ–≤',
	'–ü–∞–≤–ª–æ–≤',
	'–ö–æ–∑–ª–æ–≤',
	'–°—Ç–µ–ø–∞–Ω–æ–≤',
	'–ù–∏–∫–æ–ª–∞–µ–≤',
	'–û—Ä–ª–æ–≤',
	'–ê–Ω–¥—Ä–µ–µ–≤',
	'–ú–∞–∫–∞—Ä–æ–≤',
	'–ù–∏–∫–∏—Ç–∏–Ω',
	'–ó–∞—Ö–∞—Ä–æ–≤',
	'–ó–∞–π—Ü–µ–≤',
	'–°–æ–ª–æ–≤—å–µ–≤',
	'–ë–æ—Ä–∏—Å–æ–≤',
	'–Ø–∫–æ–≤–ª–µ–≤',
	'–ì—Ä–∏–≥–æ—Ä—å–µ–≤',
	'–†–æ–º–∞–Ω–æ–≤',
	'–í–æ—Ä–æ–±—å–µ–≤',
	'–°–µ—Ä–≥–µ–µ–≤',
	'–§—Ä–æ–ª–æ–≤',
	'–ö–æ–∑—ã—Ä–µ–≤',
	'–ü–∞–Ω–æ–≤',
	'–ö–æ–º–∞—Ä–æ–≤',
	'–ë–µ–ª–æ–≤',
	'–ì—É–ª—è–µ–≤',
	'–¢–∏—Ç–æ–≤'
]

function randomFromArray(arr, count = 1) {
	const shuffled = arr.slice().sort(() => 0.5 - Math.random())
	return count === 1 ? shuffled[0] : shuffled.slice(0, count)
}

function generateFFRId() {
	return `FFR-${faker.string.numeric(4)}-${faker.string.numeric(4)}`
}

function generateJuryCode() {
	return `J${faker.string.numeric(3)}-${faker.string.numeric(2)}`
}

function generateTrainerCode() {
	return `T${faker.string.numeric(3)}-${faker.string.numeric(2)}`
}

function generateRussianName(gender) {
	const firstName =
		gender === '–ú—É–∂—Å–∫–æ–π'
			? randomFromArray(RUSSIAN_FIRST_NAMES_M)
			: randomFromArray(RUSSIAN_FIRST_NAMES_F)
	const lastName = randomFromArray(RUSSIAN_LAST_NAMES)

	// –ñ–µ–Ω—Å–∫–∏–µ —Ñ–∞–º–∏–ª–∏–∏ —Å –æ–∫–æ–Ω—á–∞–Ω–∏–µ–º -–∞
	const femaleLastName =
		gender === '–ñ–µ–Ω—Å–∫–∏–π' && !lastName.endsWith('–∞') && !lastName.endsWith('–∏—á')
			? lastName + '–∞'
			: lastName

	return { firstName, lastName: femaleLastName }
}

async function seed() {
	try {
		await mongoose.connect(MONGODB_URI, { useNewUrlParser: true, useUnifiedTopology: true })
		console.log('Connected to MongoDB')

		// Clear existing data
		await Promise.all([
			Organization.deleteMany({}),
			Trainer.deleteMany({}),
			Jury.deleteMany({}),
			Athlete.deleteMany({}),
			Event.deleteMany({}),
			Seminar.deleteMany({})
		])
		console.log('Cleared existing data')

		// 1. Organizations (6 –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏)
		const organizations = []
		FREESTYLE_ORGANIZATIONS.slice(0, 6).forEach(orgName => {
			organizations.push({
				logo_url: `https://picsum.photos/120/80?random=${organizations.length + 7000}`,
				title: orgName,
				country: '–†–æ—Å—Å–∏—è',
				region: randomFromArray(RUSSIAN_REGIONS),
				sport: '–§—Ä–∏—Å—Ç–∞–π–ª',
				contacts: [
					`+7 ${faker.string.numeric(3)} ${faker.string.numeric(3)}-${faker.string.numeric(2)}-${faker.string.numeric(2)}`,
					`${faker.internet.username()}@${orgName.toLowerCase().replace(/\s+/g, '')}.ru`
				],
				socials: {
					vk: `https://vk.com/${faker.internet.username()}`,
					telegram: `@${faker.internet.username()}`
				},
				reports: []
			})
		})
		const orgDocs = await Organization.insertMany(organizations)
		console.log(`Seeded ${organizations.length} organizations`)

		// 2. Trainers (25 –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏)
		const trainers = []
		for (let i = 0; i < 25; i++) {
			const gender = randomFromArray(['–ú—É–∂—Å–∫–æ–π', '–ñ–µ–Ω—Å–∫–∏–π'])
			const { firstName, lastName } = generateRussianName(gender)

			trainers.push({
				photo_url: `https://picsum.photos/200/250?random=${i + 4000}`,
				trainer_id: generateTrainerCode(),
				fullname: `${lastName} ${firstName}`,
				gender: gender,
				birth_date: faker.date.birthdate({ min: 1970, max: 1995, mode: 'year' }),
				country: '–†–æ—Å—Å–∏—è',
				region: randomFromArray(RUSSIAN_REGIONS),
				sport: '–§—Ä–∏—Å—Ç–∞–π–ª',
				disciplines: randomFromArray(DISCIPLINES, faker.number.int({ min: 1, max: 3 })),
				trainer_category: randomFromArray(TRAINER_CATEGORIES),
				rank: [randomFromArray(ATHLETE_CATEGORIES)],
				position: ['–°—Ç–∞—Ä—à–∏–π —Ç—Ä–µ–Ω–µ—Ä', '–¢—Ä–µ–Ω–µ—Ä', '–¢—Ä–µ–Ω–µ—Ä-–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å'][i % 3],
				is_national_team: faker.datatype.boolean(0.2), // 20% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å
				socials: {
					vk: `https://vk.com/${faker.internet.username()}`,
					telegram: `@${faker.internet.username()}`
				}
			})
		}
		const trainerDocs = await Trainer.insertMany(trainers)
		console.log(`Seeded ${trainers.length} trainers`)

		// 3. Jury (35 –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏)
		const juries = []
		for (let i = 0; i < 35; i++) {
			const gender = randomFromArray(['–ú—É–∂—Å–∫–æ–π', '–ñ–µ–Ω—Å–∫–∏–π'])
			const { firstName, lastName } = generateRussianName(gender)

			juries.push({
				jury_code: generateJuryCode(),
				is_secretary: faker.datatype.boolean(0.15), // 15% —Å–µ–∫—Ä–µ—Ç–∞—Ä–µ–π
				photo_url: `https://picsum.photos/200/250?random=${i + 3000}`,
				name: firstName,
				lastname: lastName,
				gender: gender,
				birth_date: faker.date.birthdate({ min: 1960, max: 1995, mode: 'year' }),
				country: '–†–æ—Å—Å–∏—è',
				region: randomFromArray(RUSSIAN_REGIONS),
				jury_category: randomFromArray(JURY_CATEGORIES),
				sport: '–§—Ä–∏—Å—Ç–∞–π–ª',
				disciplines: randomFromArray(DISCIPLINES, faker.number.int({ min: 1, max: 4 })),
				socials: {
					vk: `https://vk.com/${faker.internet.username()}`,
					telegram: `@${faker.internet.username()}`
				}
			})
		}
		const juryDocs = await Jury.insertMany(juries)
		console.log(`Seeded ${juries.length} jury`)

		// 4. Athletes (55 –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ - 3 —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ 20)
		const athletes = []
		for (let i = 0; i < 55; i++) {
			const gender = randomFromArray(['–ú—É–∂—Å–∫–æ–π', '–ñ–µ–Ω—Å–∫–∏–π'])
			const { firstName, lastName } = generateRussianName(gender)
			const org = randomFromArray(orgDocs)
			const trainer = randomFromArray(trainerDocs)

			athletes.push({
				ffr_id: generateFFRId(),
				name: firstName,
				lastname: lastName,
				gender: gender,
				birth_date: faker.date.birthdate({ min: 2000, max: 2010, mode: 'year' }),
				photo_url: `https://picsum.photos/200/250?random=${i + 1000}`,
				photo_tv_url: `https://picsum.photos/400/300?random=${i + 2000}`,
				country: '–†–æ—Å—Å–∏—è',
				country_code: 'RU',
				regions: [randomFromArray(RUSSIAN_REGIONS)],
				organizations: [org.title],
				sport: '–§—Ä–∏—Å—Ç–∞–π–ª',
				disciplines: randomFromArray(DISCIPLINES, faker.number.int({ min: 1, max: 3 })),
				category: randomFromArray(ATHLETE_CATEGORIES),
				is_national_team: faker.datatype.boolean(0.1), // 10% –≤ —Å–±–æ—Ä–Ω–æ–π
				trainer: {
					trainer_id: trainer.trainer_id,
					fullname: trainer.fullname
				},
				education: `${randomFromArray(RUSSIAN_CITIES)} —Å–ø–æ—Ä—Ç–∏–≤–Ω–∞—è —à–∫–æ–ª–∞ ‚Ññ ${faker.number.int({ min: 1, max: 50 })}`,
				hobbies: randomFromArray(
					['–ú—É–∑—ã–∫–∞', '–ß—Ç–µ–Ω–∏–µ', '–ü–ª–∞–≤–∞–Ω–∏–µ', '–¢–µ–Ω–Ω–∏—Å', '–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è', '–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è'],
					2
				),
				athlete_about: `–°–ø–æ—Ä—Ç—Å–º–µ–Ω –∏–∑ ${randomFromArray(RUSSIAN_REGIONS)}, –∑–∞–Ω–∏–º–∞–µ—Ç—Å—è —Ñ—Ä–∏—Å—Ç–∞–π–ª–æ–º —Å ${faker.number.int({ min: 8, max: 15 })} –ª–µ—Ç.`,
				equipment: randomFromArray(['Head', 'Rossignol', 'Salomon', 'Atomic', 'K2'], 1),
				medals: [],
				sponsors: [],
				socials: {
					vk: `https://vk.com/${faker.internet.username()}`,
					telegram: `@${faker.internet.username()}`
				}
			})
		}
		const athleteDocs = await Athlete.insertMany(athletes)
		console.log(`Seeded ${athletes.length} athletes`)

		// 5. Events (30 –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏)
		const events = []
		for (let i = 0; i < 30; i++) {
			const org = randomFromArray(orgDocs)
			const selectedJury = randomFromArray(juryDocs, faker.number.int({ min: 3, max: 6 }))
			const forerunners = randomFromArray(athleteDocs, faker.number.int({ min: 2, max: 4 })).map(
				a => ({
					number: `${faker.number.int({ min: 1, max: 99 })}`,
					name: `${a.lastname} ${a.name}`,
					region_code: a.regions[0] || randomFromArray(RUSSIAN_REGIONS)
				})
			)

			const disciplines = randomFromArray(DISCIPLINES)
			const startDate = faker.date.between({
				from: '2024-12-01',
				to: '2025-08-31'
			})

			events.push({
				event_id: `EVT-${faker.string.numeric(4)}-${faker.string.numeric(2)}`,
				created_at: faker.date.recent({ days: 30 }),
				logo_image_url: `https://picsum.photos/300/200?random=${i + 5000}`,
				track_image_url: `https://picsum.photos/800/400?random=${i + 6000}`,
				calendar_code: faker.string.alphanumeric(8).toUpperCase(),
				title: `–ö—É–±–æ–∫ ${randomFromArray(RUSSIAN_REGIONS)} –ø–æ —Ñ—Ä–∏—Å—Ç–∞–π–ª—É ${new Date(startDate).getFullYear()}`,
				international: faker.datatype.boolean(0.3),
				start_at: startDate,
				season: randomFromArray(SEASONS),
				sport: '–§—Ä–∏—Å—Ç–∞–π–ª',
				discipline: disciplines,
				country: '–†–æ—Å—Å–∏—è',
				region: randomFromArray(RUSSIAN_REGIONS),
				location: randomFromArray(RUSSIAN_CITIES),
				organization: org.title,
				organization_logo: org.logo_url,
				timing_provider: randomFromArray(['TimingWeb', 'Datasport', 'SkiData', 'Freestyle Timing']),
				translation_url: faker.datatype.boolean(0.4)
					? `https://stream.ffr-ski.ru/event${i + 1}`
					: '',
				jury: selectedJury.map(j => ({
					jury_code: j.jury_code,
					role: randomFromArray([
						'–ì–ª–∞–≤–Ω—ã–π —Å—É–¥—å—è',
						'–°—É–¥—å—è –Ω–∞ —Å—Ç–∞—Ä—Ç–µ',
						'–°—É–¥—å—è –Ω–∞ —Ñ–∏–Ω–∏—à–µ',
						'–°–µ–∫—Ä–µ—Ç–∞—Ä—å'
					]),
					name: j.name,
					lastname: j.lastname,
					category: j.jury_category
				})),
				track_info: [
					`–î–ª–∏–Ω–∞ —Ç—Ä–∞—Å—Å—ã: ${faker.number.int({ min: 200, max: 800 })}–º`,
					`–ü–µ—Ä–µ–ø–∞–¥ –≤—ã—Å–æ—Ç: ${faker.number.int({ min: 50, max: 200 })}–º`
				],
				conditions: randomFromArray(['–Ø—Å–Ω–æ', '–û–±–ª–∞—á–Ω–æ', '–°–Ω–µ–≥', '–¢—É–º–∞–Ω'], 1),
				forerunners,
				competitions: [],
				start_protocols: [],
				result_protocols: [],
				documents: [],
				contacts: [
					`+7 ${faker.string.numeric(3)} ${faker.string.numeric(3)}-${faker.string.numeric(2)}-${faker.string.numeric(2)}`
				],
				is_public: faker.datatype.boolean(0.8),
				registration_status: faker.datatype.boolean(0.6),
				allow_registration_by_trainer: faker.datatype.boolean(0.7),
				allow_registration_by_organization: faker.datatype.boolean(0.5),
				allowed_secretaries: selectedJury.filter(j => j.is_secretary).map(j => j._id),
				athletes_groups: randomFromArray(['–ú—É–∂—á–∏–Ω—ã', '–ñ–µ–Ω—â–∏–Ω—ã', '–Æ–Ω–æ—à–∏', '–î–µ–≤—É—à–∫–∏'], 2)
			})
		}
		await Event.insertMany(events)
		console.log(`Seeded ${events.length} events`)

		// 6. Seminars (12 –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏)
		const seminars = []
		for (let i = 0; i < 12; i++) {
			const seminarDate = faker.date.between({
				from: '2024-11-01',
				to: '2025-06-30'
			})

			seminars.push({
				title: `–°–µ–º–∏–Ω–∞—Ä —Å—É–¥–µ–π –ø–æ ${randomFromArray(DISCIPLINES)} ${new Date(seminarDate).getFullYear()}`,
				sport: '–§—Ä–∏—Å—Ç–∞–π–ª',
				disciplines: randomFromArray(DISCIPLINES, faker.number.int({ min: 1, max: 2 })),
				format: randomFromArray(['–û—á–Ω—ã–π', '–ó–∞–æ—á–Ω—ã–π', '–°–º–µ—à–∞–Ω–Ω—ã–π']),
				country: '–†–æ—Å—Å–∏—è',
				region: randomFromArray(RUSSIAN_REGIONS),
				location: randomFromArray(RUSSIAN_CITIES),
				date: seminarDate,
				season: randomFromArray(SEASONS),
				documents: [],
				contacts: [
					`seminar${i + 1}@ffr-ski.ru`,
					`+7 ${faker.string.numeric(3)} ${faker.string.numeric(3)}-${faker.string.numeric(2)}-${faker.string.numeric(2)}`
				],
				participants: []
			})
		}
		await Seminar.insertMany(seminars)
		console.log(`Seeded ${seminars.length} seminars`)

		console.log('üéâ Database seeding completed successfully with realistic FFR data!')
		console.log('üìä Pagination testing ready:')
		console.log(`   - Athletes: ${athletes.length} (3 pages x 20)`)
		console.log(`   - Jury: ${juries.length} (2 pages x 20)`)
		console.log(`   - Trainers: ${trainers.length} (2 pages x 20)`)
		console.log(`   - Events: ${events.length} (2 pages x 20)`)
		console.log(`   - Organizations: ${organizations.length} (1 page)`)
		console.log(`   - Seminars: ${seminars.length} (1 page)`)

		await mongoose.disconnect()
	} catch (error) {
		console.error('Seeding error:', error)
		await mongoose.disconnect()
		process.exit(1)
	}
}

// –ó–∞–ø—É—Å–∫ seeder –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
// Windows compatibility fix
console.log('üöÄ Starting FFR Live Platform seeder...')
console.log('üìÇ Using MongoDB URI:', MONGODB_URI.replace(/\/\/.*@/, '//***:***@'))
seed()

export default seed
