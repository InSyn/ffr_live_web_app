name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: '18.x'
  MONGODB_VERSION: '7.0'

jobs:
  # Code Quality and Security
  lint-and-security:
    name: üîç Lint & Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          npm run install:all

      - name: Run ESLint
        run: npm run lint:check

      - name: Security audit
        run: npm audit --audit-level moderate

      - name: Run CodeQL Analysis
        uses: github/codeql-action/init@v3
        with:
          languages: javascript

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  # Frontend Tests
  test-frontend:
    name: üé® Frontend Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          npm run install:frontend

      - name: Run frontend tests
        run: |
          cd frontend
          npm run test:coverage

      - name: Upload frontend coverage
        uses: codecov/codecov-action@v3
        with:
          files: ./frontend/coverage/lcov.info
          flags: frontend
          name: frontend-coverage

  # Backend Tests
  test-backend:
    name: üîß Backend Tests
    runs-on: ubuntu-latest

    services:
      mongodb:
        image: mongo:7.0
        env:
          MONGO_INITDB_ROOT_USERNAME: testuser
          MONGO_INITDB_ROOT_PASSWORD: testpass
        ports:
          - 27017:27017

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          npm run install:backend

      - name: Run backend tests
        run: |
          cd backend
          npm run test:coverage
        env:
          NODE_ENV: test
          DB_USER: testuser
          DB_PWD: testpass
          DB_HOSTNAME: localhost
          DB_PORT: 27017
          DB: test_ffr_live
          JWT_SECRET: test_secret_key_for_testing_only

      - name: Upload backend coverage
        uses: codecov/codecov-action@v3
        with:
          files: ./backend/coverage/lcov.info
          flags: backend
          name: backend-coverage

  # Build and Docker
  build-and-docker:
    name: üê≥ Build & Docker
    runs-on: ubuntu-latest
    needs: [lint-and-security, test-frontend, test-backend]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          npm run install:all

      - name: Build frontend
        run: npm run build:frontend

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker images
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          docker buildx build --platform linux/amd64,linux/arm64 \
            -t ffr-live/backend:latest \
            -t ffr-live/backend:${{ github.sha }} \
            --push ./backend
            
          docker buildx build --platform linux/amd64,linux/arm64 \
            -t ffr-live/frontend:latest \
            -t ffr-live/frontend:${{ github.sha }} \
            --push ./frontend

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'ffr-live/backend:latest'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # Integration Tests
  integration-tests:
    name: üß™ Integration Tests
    runs-on: ubuntu-latest
    needs: [build-and-docker]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Start services
        run: |
          cp .env.example .env
          docker-compose up -d

      - name: Wait for services
        run: |
          timeout 300 bash -c 'until curl -f http://localhost:8081/api/v1/health; do sleep 5; done'

      - name: Run integration tests
        run: |
          cd backend
          npm run test:integration

      - name: Cleanup
        if: always()
        run: docker-compose down -v

  # Performance Tests
  performance-tests:
    name: ‚ö° Performance Tests
    runs-on: ubuntu-latest
    needs: [integration-tests]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install Artillery
        run: npm install -g artillery@latest

      - name: Start services
        run: |
          cp .env.example .env
          docker-compose up -d

      - name: Wait for services
        run: |
          timeout 300 bash -c 'until curl -f http://localhost:8081/api/v1/health; do sleep 5; done'

      - name: Run performance tests
        run: |
          artillery run tests/performance/load-test.yml --output report.json
          artillery report report.json --output performance-report.html

      - name: Upload performance report
        uses: actions/upload-artifact@v3
        with:
          name: performance-report
          path: performance-report.html

  # Deployment
  deploy:
    name: üöÄ Deploy to Production
    runs-on: ubuntu-latest
    needs: [integration-tests]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to production
        run: |
          echo "üöÄ Deploying to production..."
          # Add your deployment script here
          # Example: SSH to server and run deployment commands

      - name: Notify deployment
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        if: always()
